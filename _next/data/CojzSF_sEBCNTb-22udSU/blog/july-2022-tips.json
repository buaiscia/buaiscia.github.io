{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"sending-errors-through-a-formik-form\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sending-errors-through-a-formik-form\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Sending errors through a Formik form\"), mdx(\"p\", null, \"When we need to validate a Formik form (often with Yup) we can use the following method: validateForm.\\nIt returns a promise so we have to check if it resolves or not.\\nHowever, the validation errors are sent directly inside the promise as an argument and not caught. So the promise is always resolved in this case.\"), mdx(\"p\", null, \"To pass the validation error, then, we have to pass the errors as an argument of the promise itself.\"), mdx(\"pre\", {\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"  formik\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"validateForm\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"...\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"then\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"errors\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"submit\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"formik\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" values\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" errors\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \"\\n\")), mdx(\"p\", null, \"Then the errors can be checked and the logic can be written in the submit method.\"), mdx(\"pre\", {\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"const\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"submit\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"formik\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" values\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" errors\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=>\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"...\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\")), mdx(\"p\", null, \"Bonus: here are the types (for TS users) for the 3 arguments above:\"), mdx(\"pre\", {\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"formik\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"FormikContextType\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"FormikValues\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"values\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"FormikValues\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"errors\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"FormikErrors\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"FormikValues\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">\"), \"\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h3 id=\"sending-errors-through-a-formik-form\"><a href=\"#sending-errors-through-a-formik-form\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Sending errors through a Formik form</h3><p>When we need to validate a Formik form (often with Yup) we can use the following method: validateForm.\nIt returns a promise so we have to check if it resolves or not.\nHowever, the validation errors are sent directly inside the promise as an argument and not caught. So the promise is always resolved in this case.</p><p>To pass the validation error, then, we have to pass the errors as an argument of the promise itself.</p><pre class=\"language-js\"><code class=\"language-js\">  formik<span class=\"text-code-white\">.</span><span class=\"\">validateForm</span><span class=\"text-code-white\">(</span><span class=\"text-code-white\">{</span><span class=\"\">...</span><span class=\"text-code-white\">}</span><span class=\"text-code-white\">)</span>\n    <span class=\"text-code-white\">.</span><span class=\"\">then</span><span class=\"text-code-white\">(</span><span class=\"text-code-white\">(</span><span class=\"\">errors</span><span class=\"text-code-white\">)</span> <span class=\"\">=&gt;</span> <span class=\"text-code-blue\">submit</span><span class=\"text-code-white\">(</span>formik<span class=\"text-code-white\">,</span> values<span class=\"text-code-white\">,</span> errors<span class=\"text-code-white\">)</span><span class=\"text-code-white\">)</span>\n</code></pre><p>Then the errors can be checked and the logic can be written in the submit method.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"text-code-purple\">const</span> <span class=\"\">submit</span> <span class=\"\">=</span> <span class=\"text-code-white\">(</span><span class=\"\">formik<span class=\"text-code-white\">,</span> values<span class=\"text-code-white\">,</span> errors</span><span class=\"text-code-white\">)</span> <span class=\"\">=&gt;</span> <span class=\"text-code-white\">{</span><span class=\"\">...</span><span class=\"text-code-white\">}</span>\n</code></pre><p>Bonus: here are the types (for TS users) for the 3 arguments above:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"\">formik</span><span class=\"\">:</span> <span class=\"\">FormikContextType</span><span class=\"\">&lt;</span><span class=\"\">FormikValues</span><span class=\"\">&gt;</span>\n<span class=\"\">values</span><span class=\"\">:</span> <span class=\"\">FormikValues</span>\n<span class=\"\">errors</span><span class=\"\">:</span> <span class=\"\">FormikErrors</span><span class=\"\">&lt;</span><span class=\"\">FormikValues</span><span class=\"\">&gt;</span>\n</code></pre>","scope":{}},"frontMatter":{"wordCount":140,"readingTime":{"text":"1 min read","minutes":0.69,"time":41400,"words":138},"slug":"july-2022-tips","fileName":"july-2022-tips.md","title":"Developer Tips: July 2022","date":"2022-07-22","draft":false,"tags":["web development","react","tips"],"summary":"Development tips for the month of July"}},"prev":{"title":"How I passed from Junior to Intermediate developer in one year","date":"2021-12-15","draft":false,"tags":["insights"],"summary":"Learning from going above junior is not easy. This is why I think I did it and what I could learn in this passage","slug":"how-passed-from-junior-to-intermediate-dev-one-year"},"next":null},"__N_SSG":true}