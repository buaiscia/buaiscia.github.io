{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var r=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var o=a=>c(a,\"__esModule\",{value:!0});var u=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),k=(a,s)=>{o(a);for(var t in s)c(a,t,{get:s[t],enumerable:!0})},N=(a,s,t)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let n of d(s))!m.call(a,n)&&n!==\"default\"&&c(a,n,{get:()=>s[n],enumerable:!(t=p(s,n))||t.enumerable});return a},g=a=>N(o(c(a!=null?r(h(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var i=u((I,l)=>{l.exports=_jsx_runtime});var b={};k(b,{default:()=>f,frontmatter:()=>y});var e=g(i()),y={title:\"Fixing Material UI and Emotion's handling of Transient Options\",date:\"2023-01-31\",draft:!1,tags:[\"Web development\",\"React\",\"Material UI\",\"tips\"],summary:\"Passing Props to custom Emotion styles with Material UI\"};function w(a={}){let{wrapper:s}=a.components||{};return s?(0,e.jsx)(s,Object.assign({},a,{children:(0,e.jsx)(t,{})})):t();function t(){let n=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",a:\"a\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Recently I encountered an issue with the Material UI that I couldn't wrap my head around. What was happening?\"}),(0,e.jsx)(n.p,{children:\"Modern libraries for managing custom CSS, like Styled Components or Emotion, have accustomed us developers to the possibility to use styled elements as real, reusable components. They can even extend other styles or other components. CSS becomes building blocks like React, and that's just great.\"}),(0,e.jsx)(n.p,{children:\"Using Material UI means using Emotion. It works similarly to Styled Components, although the syntax is slightly different. One of the advantages of using these libraries with React is that you can pass them props and you can change the style according to their values.\"}),(0,e.jsx)(n.p,{children:\"However, it turns out that Emotion with Material UI lacks proper handling of this feature (as of now at least), which is called transient options. So if you pass a boolean value as a prop and use it like this:\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-js\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// component\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"MyStyledBox\"}),\" isdarktheme\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// style file\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"import\"}),\" \",(0,e.jsxs)(n.span,{className:\"token imports\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"Box\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"from\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'@mui/material'\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"export\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"MyStyledBox\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"styled\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"Box\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsxs)(n.span,{className:\"token parameter\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"isdarktheme\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator arrow\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" isdarktheme \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"?\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'white'\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'black'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"React will throw a warning saying: 'Received \",(0,e.jsx)(n.code,{children:\"true\"}),\" for non-boolean attribute \",(0,e.jsx)(n.code,{children:\"isdarktheme\"}),\"'. It will work, but the warning will stay.\"]}),(0,e.jsxs)(n.p,{children:[\"How to fix it? I found that there's an issue opened with Emotion about this, and here's \",(0,e.jsx)(n.a,{href:\"https://github.com/emotion-js/emotion/issues/2193#issuecomment-766173118\",children:\"the best working workaround answer.\"})]}),(0,e.jsx)(n.p,{children:\"So here's how I followed it and implemented it. In one util file, I added:\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-javascript\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"export\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" transientOptions\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"Parameters\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"CreateStyled\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token function function-variable\",children:\"shouldForwardProp\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsxs)(n.span,{className:\"token parameter\",children:[\"propName\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" string\"]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator arrow\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"!\"}),\"propName\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"startsWith\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'$'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"This identifies the props starting with $ as transientOptions through the React hook shouldForwardProp. As the name says, it will allow the prop to be passed.\"}),(0,e.jsx)(n.p,{children:\"Then I can import the method and use it as an option for the emotion component. Here's with TS:\"}),(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-typescript\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"import\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" transientOptions \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"from\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'utils'\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Props\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    $isdarktheme\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"export\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" MyStyledBox \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"styled\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"Box\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" transientOptions\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"Props\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" theme\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" $isdarktheme \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" $isdarktheme \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"?\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'white'\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'black'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"The warning disappeared and the prop is correctly taken by Emotion.\"}),(0,e.jsxs)(n.p,{children:[\"Thank you for reading! Let's connect on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/AlexBuaiscia\",children:\"Twitter\"}),\" or \",(0,e.jsx)(n.a,{href:\"@alex_@uiuxdev.social\",children:\"Mastodon\"}),\"!\"]})]})}}var f=w;return b;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.62,"time":157200,"words":524},"slug":"tips/passing-props-emotion-styles-material-ui","fileName":"tips/passing-props-emotion-styles-material-ui.md","title":"Fixing Material UI and Emotion's handling of Transient Options","date":"2023-01-31T00:00:00.000Z","draft":false,"tags":["Web development","React","Material UI","tips"],"summary":"Passing Props to custom Emotion styles with Material UI"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.94,"time":56400,"words":188},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"Reduce your Jest tests running time (especially on hooks!) with the maxWorkers option","date":"2022-12-08T00:00:00.000Z","draft":false,"tags":["web development","jest","testing"],"summary":"How tweaking the maxWorkers option can increase tests efficiency","slug":"tips/reduce-jest-tests-running-time-maxworkers"},"next":{"title":"Removing Default React Imports. For a Cleaner Code","date":"2023-02-13T00:00:00.000Z","draft":false,"tags":["Web development","React","tips"],"summary":"Simplifying Your Codebase with the New JSX Transform and Eslint Configuration","slug":"tips/removing-react-imports"}},"__N_SSG":true}