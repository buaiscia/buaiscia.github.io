{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://res.cloudinary.com/buaiscia/image/upload/v1614200427/techblog/git_ayzsas.jpg\",\n    \"alt\": \"Git\"\n  })), mdx(\"p\", null, \"I'm creating this post for reminding myself about some useful git features... and updating it along the way.\"), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Create new git local repository\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git init\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Normal way for committing and pushing\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git add .\\n\\ngit commit -m \\\"message\\\"\\n\\ngit push origin master\\n\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Check status\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git status\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Create new branch\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout -b branchname\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Switch between branches\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout branchname\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Push branch to remote\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git push origin branchname\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Push local working branch to its correspondent on Github\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git push origin HEAD\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Merge branch into master\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout master\\n\\ngit merge branchname\\n\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"How to remove file/dir from git after adding it to .gitignore\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git rm --cached (file)\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Command to check which files are ignored\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git status --ignored\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"How to force revert to last status of master if pulled by mistake from remote depository\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reset --hard master@{time to revert back in minutes}\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"possibly losing last commit\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reset --hard a0d3fe6\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reverting to last commit\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"How to force revert after a rebase\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reflog\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"check the HEAD{number} before the rebase starts\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reset --hard HEAD{number}\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Wrong name branch? No problem: delete the one in GH, rename the local one and repush it\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git push origin :old-name-of-branch-on-github\\ngit branch -m old-name-of-branch-on-github new-name-for-branch-you-want\\ngit push origin new-name-for-branch-you-want\\n\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Need to change the branch but have uncommitted, unstaged changes that can conflict with the other branch? Stash comes to help\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash list\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- list all stashes\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- stash (saves all unstaged changes in a temporary state under the current commit name)\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash apply\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- place back all the last stashed changes\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash apply stash@{3}\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- place back all the changes stashed at the stash n.4 (counting from 0)\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash drop stash@{3}\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- delete a particular stash\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash clear\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-- delete all stashes\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Make a diff between two branches. In a situation, for example, in which I need to rebase, or check the changes between the two branches\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git diff branch1..branch2\")), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Rebase. You have new merged changes on the master branch and need to merge in a clean way those changes in your local branch. It will place in the local log all master commit logs as well. After rebase, push -f origin HEAD\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Flow:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout master\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git pull origin master\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout localbranch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git rebase master\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git push -f origin localbranch\"))), mdx(\"p\", null, \"-- \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Get remote branch locally\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git fetch\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout remote-branch\")), mdx(\"p\", null, \"-- \", \"_\", \"...Or the alternative way\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout -b remote-branch\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git pull origin remote-branch\")), mdx(\"p\", null, \"-- \", \"_\", \"Delete multiple branches in git\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git branch | grep \\\"<pattern>\\\"\"), \" to preview the branches\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git branch | grep \\\"<pattern>\\\" | xargs git branch -D\"), \" to actually delete them\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"https://res.cloudinary.com/buaiscia/image/upload/v1614200427/techblog/git_ayzsas.jpg\" alt=\"Git\"/></p><p>I&#x27;m creating this post for reminding myself about some useful git features... and updating it along the way.</p><p>-- <em>Create new git local repository</em></p><p><code>git init</code></p><p>-- <em>Normal way for committing and pushing</em></p><pre><code>git add .\n\ngit commit -m &quot;message&quot;\n\ngit push origin master\n</code></pre><p>-- <em>Check status</em></p><p><code>git status</code></p><p>-- <em>Create new branch</em></p><p><code>git checkout -b branchname</code></p><p>-- <em>Switch between branches</em></p><p><code>git checkout branchname</code></p><p>-- <em>Push branch to remote</em></p><p><code>git push origin branchname</code></p><p>-- <em>Push local working branch to its correspondent on Github</em></p><p><code>git push origin HEAD</code></p><p>-- <em>Merge branch into master</em></p><pre><code>git checkout master\n\ngit merge branchname\n</code></pre><p>-- <em>How to remove file/dir from git after adding it to .gitignore</em></p><p><code>git rm --cached (file)</code></p><p>-- <em>Command to check which files are ignored</em></p><p><code>git status --ignored</code></p><p>-- <em>How to force revert to last status of master if pulled by mistake from remote depository</em></p><p><code>git reset --hard master@{time to revert back in minutes}</code> <em>possibly losing last commit</em></p><p><code>git reset --hard a0d3fe6</code> <em>reverting to last commit</em></p><p>-- <em>How to force revert after a rebase</em></p><p><code>git reflog</code> <em>check the HEAD{number} before the rebase starts</em>\n<code>git reset --hard HEAD{number}</code></p><p>-- <em>Wrong name branch? No problem: delete the one in GH, rename the local one and repush it</em></p><pre><code>git push origin :old-name-of-branch-on-github\ngit branch -m old-name-of-branch-on-github new-name-for-branch-you-want\ngit push origin new-name-for-branch-you-want\n</code></pre><p>-- <em>Need to change the branch but have uncommitted, unstaged changes that can conflict with the other branch? Stash comes to help</em></p><p><code>git stash list</code> <em>-- list all stashes</em></p><p><code>git stash</code> <em>-- stash (saves all unstaged changes in a temporary state under the current commit name)</em></p><p><code>git stash apply</code> <em>-- place back all the last stashed changes</em></p><p><code>git stash apply stash@{3}</code> <em>-- place back all the changes stashed at the stash n.4 (counting from 0)</em></p><p><code>git stash drop stash@{3}</code> <em>-- delete a particular stash</em></p><p><code>git stash clear</code> <em>-- delete all stashes</em></p><p>-- <em>Make a diff between two branches. In a situation, for example, in which I need to rebase, or check the changes between the two branches</em></p><p><code>git diff branch1..branch2</code></p><p>-- <em>Rebase. You have new merged changes on the master branch and need to merge in a clean way those changes in your local branch. It will place in the local log all master commit logs as well. After rebase, push -f origin HEAD</em></p><p><em>Flow:</em></p><ul><li><code>git checkout master</code></li><li><code>git pull origin master</code></li><li><code>git checkout localbranch</code></li><li><code>git rebase master</code></li><li><code>git push -f origin localbranch</code></li></ul><p>-- <em>Get remote branch locally</em></p><p><code>git fetch</code></p><p><code>git checkout remote-branch</code></p><p>-- <!-- -->_<!-- -->...Or the alternative way</p><p><code>git checkout -b remote-branch</code></p><p><code>git pull origin remote-branch</code></p><p>-- <!-- -->_<!-- -->Delete multiple branches in git</p><p><code>git branch | grep &quot;&lt;pattern&gt;&quot;</code> to preview the branches</p><p><code>git branch | grep &quot;&lt;pattern&gt;&quot; | xargs git branch -D</code> to actually delete them</p>","scope":{}},"frontMatter":{"wordCount":464,"readingTime":{"text":"3 min read","minutes":2.31,"time":138600,"words":462},"slug":"useful-git-commands","fileName":"useful-git-commands.mdx","title":"Useful GIT commands","date":"2021-01-26","tags":["git","web development"],"draft":false,"summary":"Useful commands to use in git in everyday working life"}},"prev":{"title":"How I transitioned from humanistic jobs to tech and development and why it is possible to start from the basics.","date":"2020-12-02","draft":false,"tags":["insights"],"summary":"Transitioning from literature and languages to tech was not easy. Making a career from basic roles to developer is possible, and even better sometimes.","slug":"how-transitioned-from-humanistic-to-tech-and-helped"},"next":null},"__N_SSG":true}