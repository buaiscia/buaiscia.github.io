{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var r=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var o=a=>c(a,\"__esModule\",{value:!0});var u=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),N=(a,t)=>{o(a);for(var s in t)c(a,s,{get:t[s],enumerable:!0})},k=(a,t,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of h(t))!m.call(a,n)&&n!==\"default\"&&c(a,n,{get:()=>t[n],enumerable:!(s=p(t,n))||s.enumerable});return a},g=a=>k(o(c(a!=null?r(d(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var l=u((v,i)=>{i.exports=_jsx_runtime});var w={};N(w,{default:()=>x,frontmatter:()=>y});var e=g(l()),y={title:\"Testing the styles of DOM elements with React Testing Library\",date:\"2023-02-16\",draft:!1,tags:[\"web development\",\"react\",\"react-testing-library\"],summary:\"Using the popular testing library to test dynamic style changes in our components\"};function f(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,Object.assign({},a,{children:(0,e.jsx)(s,{})})):s();function s(){let n=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",a:\"a\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Sometimes -or often, depending on the case- we need to test some particular style that can change depending on some property. The way this is implemented depends on the library we use for the styling.\"}),(0,e.jsx)(n.p,{children:\"Supposing that we have some text, inside a component, that depending on the prop it's white or black. In the DOM, it will reflect this way. However, especially as it's not a fixed element, it's better that we test how it behaves on different pages.\"}),(0,e.jsx)(n.p,{children:\"The test itself using React Testing Library is very simple because it checks directly the DOM:\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"language-js code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"render\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"MyComponent\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" text \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" screen\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"getByText\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'text in the page'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"expect\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"text\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"toBeInTheDocument\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"expect\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"text\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"toHaveStyle\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'#FFFFF'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"The library converts the colour in hex code against RGB, so if they match, the test will pass; otherwise, it will return the returned RGB colour (i.e. 0,0,0) and the expected one (i.e. 255,255,255). With it, it's very easy to spot the mistake, or why a test is failing.\"}),(0,e.jsx)(n.p,{children:\"We can also test directly the prop that we're passing and the consequent change of colour in the component:\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"language-js code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"rerender\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"render\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"MyComponent\"}),\" changingProp\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'white'\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"expect\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"screen\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"getByText\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'text in the page'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"toHaveStyle\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'#FFFFF'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"rerender\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"MyComponent\"}),\" changingProp\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'black'\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  \n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token function\",children:\"expect\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"screen\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"getByText\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'text in the page'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function method property-access\",children:\"toHaveStyle\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" color\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'#00000'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"You have to notice here that I had to call screen.getByText twice, because that function is returning immediately the DOM element. If I would set it as before in a variable, at the moment of checking 'text' the second time, it would have stored the previous DOM element and not the updated one.\"}),(0,e.jsxs)(n.p,{children:[\"Thank you for reading! Let's connect on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/AlexBuaiscia\",children:\"Twitter\"})]})]})}}var x=f;return w;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.06,"time":123600,"words":412},"slug":"tips/testing-styles-react-testing-library","fileName":"tips/testing-styles-react-testing-library.md","title":"Testing the styles of DOM elements with React Testing Library","date":"2023-02-16T00:00:00.000Z","draft":false,"tags":["web development","react","react-testing-library"],"summary":"Using the popular testing library to test dynamic style changes in our components"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.94,"time":56400,"words":188},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"Removing Default React Imports. For a Cleaner Code","date":"2023-02-13T00:00:00.000Z","draft":false,"tags":["Web development","React","tips"],"summary":"Simplifying Your Codebase with the New JSX Transform and Eslint Configuration","slug":"tips/removing-react-imports"},"next":null},"__N_SSG":true}