{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var o=Object.create;var t=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var h=r=>t(r,\"__esModule\",{value:!0});var u=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{h(r);for(var i in e)t(r,i,{get:e[i],enumerable:!0})},f=(r,e,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!p.call(r,c)&&c!==\"default\"&&t(r,c,{get:()=>e[c],enumerable:!(i=s(e,c))||i.enumerable});return r},w=r=>f(h(t(r!=null?o(g(r)):{},\"default\",r&&r.__esModule&&\"default\"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var a=u((_,l)=>{l.exports=_jsx_runtime});var x={};b(x,{default:()=>v,frontmatter:()=>y});var n=w(a()),y={title:\"Useful GIT commands\",date:\"2021-01-26\",tags:[\"git\",\"tips\"],draft:!1,summary:\"Useful commands to use in git in everyday working life\"};function d(r){let e=Object.assign({p:\"p\",img:\"img\",em:\"em\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://res.cloudinary.com/buaiscia/image/upload/v1614200427/techblog/git_ayzsas.jpg\",alt:\"Git\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I'm creating this post for reminding myself about some useful git features... and updating it along the way.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Create new git local repository\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git init\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Normal way for committing and pushing\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`git add .\n\ngit commit -m \"message\"\n\ngit push origin master\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Check status\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git status\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Create new branch\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git checkout -b branchname\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Switch between branches\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git checkout branchname\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Push branch to remote\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git push origin branchname\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Push local working branch to its correspondent on Github\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git push origin HEAD\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Merge branch into master\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`git checkout master\n\ngit merge branchname\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"How to remove file/dir from git after adding it to .gitignore\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git rm --cached (file)\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Command to check which files are ignored\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git status --ignored\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"How to force revert to last status of master if pulled by mistake from remote depository\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git reset --hard master@{time to revert back in minutes}\"}),\" \",(0,n.jsx)(e.em,{children:\"possibly losing last commit\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git reset --hard a0d3fe6\"}),\" \",(0,n.jsx)(e.em,{children:\"reverting to last commit\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"How to force revert after a rebase\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javacript\",children:`  git reflog\\` ## check the HEAD{number} before the rebase starts\n  git reset --hard HEAD{number}\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Wrong name branch? No problem: delete the one in GH, rename the local one and repush it\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`git push origin :old-name-of-branch-on-github\ngit branch -m old-name-of-branch-on-github new-name-for-branch-you-want\ngit push origin new-name-for-branch-you-want\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Need to change the branch but have uncommitted, unstaged changes that can conflict with the other branch? Stash comes to help\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash list\"}),\" \",(0,n.jsx)(e.em,{children:\"-- list all stashes\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash\"}),\" \",(0,n.jsx)(e.em,{children:\"-- stash (saves all unstaged changes in a temporary state under the current commit name)\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash apply\"}),\" \",(0,n.jsx)(e.em,{children:\"-- place back all the last stashed changes\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash apply stash@{3}\"}),\" \",(0,n.jsx)(e.em,{children:\"-- place back all the changes stashed at the stash n.4 (counting from 0)\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash drop stash@{3}\"}),\" \",(0,n.jsx)(e.em,{children:\"-- delete a particular stash\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"git stash clear\"}),\" \",(0,n.jsx)(e.em,{children:\"-- delete all stashes\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Make a diff between two branches. In a situation, for example, in which I need to rebase, or check the changes between the two branches\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git diff branch1..branch2\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Rebase. You have new merged changes on the master branch and need to merge in a clean way those changes in your local branch. It will place in the local log all master commit logs as well. After rebase, push -f origin HEAD\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Flow:\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"git checkout master\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"git pull origin master\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"git checkout localbranch\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"git rebase master\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"git push -f origin localbranch\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"-- \",(0,n.jsx)(e.em,{children:\"Get remote branch locally\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git fetch\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git checkout remote-branch\"})}),`\n`,(0,n.jsx)(e.p,{children:\"-- _...Or the alternative way\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git checkout -b remote-branch\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"git pull origin remote-branch\"})}),`\n`,(0,n.jsx)(e.p,{children:\"-- _Delete multiple branches in git\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:'git branch | grep \"<pattern>\"'}),\" to preview the branches\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:'git branch | grep \"<pattern>\" | xargs git branch -D'}),\" to actually delete them\"]})]})}function k(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var v=k;return x;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.495,"time":149700,"words":499},"slug":"tips/useful-git-commands","fileName":"tips/useful-git-commands.md","title":"Useful GIT commands","date":"2021-01-26T00:00:00.000Z","tags":["git","tips"],"draft":false,"summary":"Useful commands to use in git in everyday working life"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.84,"time":50400,"words":168},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"How I transitioned from humanistic jobs to tech and development and why it is possible to start from the basics.","date":"2020-12-02T00:00:00.000Z","draft":false,"tags":["insights","career"],"summary":"Transitioning from literature and languages to tech was not easy. Making a career from basic roles to developer is possible, and even better sometimes.","slug":"career/how-transitioned-from-humanistic-to-tech-and-helped"},"next":{"title":"What I learnt in my first six months as a working (self-taught) developer","date":"2021-07-06T00:00:00.000Z","template":"post","draft":false,"tags":["insights","career"],"summary":"The first six months of a developer are maybe the most challenging. This is what I learnt. My mistakes and accomplishments, to become a better dev","slug":"career/what-learnt-in-first-six-months-self-taught-developer"}},"__N_SSG":true}