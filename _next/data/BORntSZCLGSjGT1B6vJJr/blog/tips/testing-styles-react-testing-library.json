{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var s=t=>i(t,\"__esModule\",{value:!0});var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{s(t);for(var o in e)i(t,o,{get:e[o],enumerable:!0})},x=(t,e,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(t,r)&&r!==\"default\"&&i(t,r,{get:()=>e[r],enumerable:!(o=d(e,r))||o.enumerable});return t},f=t=>x(s(i(t!=null?l(m(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var c=u((M,a)=>{a.exports=_jsx_runtime});var T={};y(T,{default:()=>v,frontmatter:()=>w});var n=f(c()),w={title:\"Testing the styles of DOM elements with React Testing Library\",date:\"2023-02-16\",draft:!1,tags:[\"web development\",\"react\",\"react-testing-library\"],summary:\"Using the popular testing library to test dynamic style changes in our components\"};function h(t){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Sometimes -or often, depending on the case- we need to test some particular style that can change depending on some property.\nThe way this is implemented depends on the library we use for the styling.`}),`\n`,(0,n.jsx)(e.p,{children:`Supposing that we have some text, inside a component, that depending on the prop it's white or black.\nIn the DOM, it will reflect this way. However, especially as it's not a fixed element, we should test how it behaves on different pages.`}),`\n`,(0,n.jsx)(e.p,{children:\"The test itself using React Testing Library is very simple because it checks directly the DOM:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`  render(<MyComponent>)\n  \n  const text = screen.getByText('text in the page')\n  expect(text).toBeInTheDocument()\n  expect(text).toHaveStyle({ color: '#FFFFF'})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The library converts the colour in hex code against RGB, so if they match, the test will pass; otherwise, it will return the returned RGB colour (i.e. 0,0,0) and the expected one (i.e. 255,255,255). With it, it's very easy to spot the mistake, or why a test is failing.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can also test directly the prop that we're passing and the consequent change of colour in the component:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`  const {rerender} = render(<MyComponent changingProp='white'>)\n  \n  expect(screen.getByText('text in the page')).toHaveStyle({ color: '#FFFFF'})\n  \n  rerender(<MyComponent changingProp='black'>)\n  \n  expect(screen.getByText('text in the page')).toHaveStyle({ color: '#00000'})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You have to notice here that I had to call screen.getByText twice, because that function is returning immediately the DOM element. If I would set it as before in a variable, at the moment of checking 'text' the second time, it would have stored the previous DOM element and not the updated one.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Thank you for reading! Let's connect on \",(0,n.jsx)(e.a,{href:\"https://twitter.com/AlexBuaiscia\",children:\"Twitter\"})]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var v=b;return T;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"2 min read","minutes":1.545,"time":92700,"words":309},"slug":"tips/testing-styles-react-testing-library","fileName":"tips/testing-styles-react-testing-library.md","title":"Testing the styles of DOM elements with React Testing Library","date":"2023-02-16T00:00:00.000Z","draft":false,"tags":["web development","react","react-testing-library"],"summary":"Using the popular testing library to test dynamic style changes in our components"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.84,"time":50400,"words":168},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"Removing Default React Imports. For a Cleaner Code","date":"2023-02-13T00:00:00.000Z","draft":false,"tags":["Web development","React","tips"],"summary":"Simplifying Your Codebase with the New JSX Transform and Eslint Configuration","slug":"tips/removing-react-imports"},"next":{"title":"The Holistic History Project","date":"2023-04-28T00:00:00.000Z","draft":false,"tags":["Database","Web development","Holistic History"],"summary":"Creating a new polymathic web project about history","slug":"holistic-history/the-holistic-history-project"}},"__N_SSG":true}