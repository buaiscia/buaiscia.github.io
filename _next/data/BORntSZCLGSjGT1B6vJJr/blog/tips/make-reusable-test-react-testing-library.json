{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var s=t=>a(t,\"__esModule\",{value:!0});var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{s(t);for(var r in e)a(t,r,{get:e[r],enumerable:!0})},x=(t,e,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!m.call(t,o)&&o!==\"default\"&&a(t,o,{get:()=>e[o],enumerable:!(r=d(e,o))||r.enumerable});return t},w=t=>x(s(a(t!=null?h(u(t)):{},\"default\",t&&t.__esModule&&\"default\"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var c=g((C,i)=>{i.exports=_jsx_runtime});var T={};f(T,{default:()=>k,frontmatter:()=>y});var n=w(c()),y={title:\"Make a reusable test with React Testing Library\",date:\"2022-11-22\",draft:!1,tags:[\"web development\",\"react\",\"react testing library\",\"testing\"],summary:\"Abstract methods to be reused by different tests\"};function l(t){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"It can happen to have very similar tests across our suites. In one of my recent examples, I had to test if the UI of the footer of the pages in the application was correctly rendered, depending on a prop change.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The footer consists only of a box with inside an SVG icon and a text. But those are white when we have a dark background, and  dark gray when the background is white.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The logic is already in place, and the simple test steps would be:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"render the page (component)\"}),`\n`,(0,n.jsx)(e.li,{children:\"get the elements to check\"}),`\n`,(0,n.jsx)(e.li,{children:\"check that the elements have the correct style.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The next -and boring- step would be placing this test inside each page test suite, and check for the color individually.\"}),`\n`,(0,n.jsx)(e.p,{children:`Instead, we can make a reusable test, like a normal function.\nWe can put it in some shared.js file so it can be picked up anytime.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { screen, waitFor } from '@testing-library/react'\n\nconst testPageFooterWithColor = (renderPage, expectedColor) => {\n  test('it checks that the footer is present and has the correct color', async () => {\n    renderPage()\n\n    const footerText = screen.getByText('our footer text')\n\n    await waitFor(() => {\n      expect(footerText).toBeInTheDocument()\n    })\n\n    expect(footerText).toHaveStyle({ color: expectedColor })\n  })\n}\n\nexport { testPageFooterWithColor }\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Then we can import it in our suites:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`  const renderCustomPage = () => {\n    render(\n      <CustomPage />,\n      { wrapper: MemoryRouter },\n    )\n  }\n  \n  describe('our test suite', () => {\n    ...our tests\n     \n    testPageFooterWithColor(renderCustomPage, 'white')\n  })\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Thank you for reading! Let's connect on \",(0,n.jsx)(e.a,{href:\"https://twitter.com/AlexBuaiscia\",children:\"Twitter\"}),\" or \",(0,n.jsx)(e.a,{href:\"@alex_@uiuxdev.social\",children:\"Mastodon\"}),\"!\"]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var k=b;return T;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"2 min read","minutes":1.495,"time":89700,"words":299},"slug":"tips/make-reusable-test-react-testing-library","fileName":"tips/make-reusable-test-react-testing-library.md","title":"Make a reusable test with React Testing Library","date":"2022-11-22T00:00:00.000Z","draft":false,"tags":["web development","react","react testing library","testing"],"summary":"Abstract methods to be reused by different tests"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.84,"time":50400,"words":168},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"Making reusable get methods in React Testing Library","date":"2022-11-16T00:00:00.000Z","draft":false,"tags":["web development","react","react testing library","testing"],"summary":"Creating some abstractions to have ready to use getter functions","slug":"tips/make-reusable-get-methods-react-testing-library"},"next":{"title":"Finding a bug after writing a test, an example","date":"2022-11-30T00:00:00.000Z","draft":false,"tags":["web development","react","testing"],"summary":"I wrote a test and found a small bug. Even in React writing tests is important","slug":"tips/finding-bug-writing-tests-example"}},"__N_SSG":true}