{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post was supposed to be after three months into my work. But time passed, and so here it is with the experience of a couple more months.\"), mdx(\"h2\", {\n    \"id\": \"before-i-got-hired\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#before-i-got-hired\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Before I got hired\"), mdx(\"p\", null, \"My story about getting a developer job is coming from a long way in the past. I wrote about it \", mdx(\"a\", {\n    href: \"https://\"\n  }, \"here.\")), mdx(\"p\", null, \"What I specifically learnt in the one or two years of learning development were the basics, how to create something simple in a linear order, and some styling. I also learnt through examples and a lot of stack overflow 'investigation' how to put things somehow together and make it work. A lot of copy paste not working and lots of sweat to make it work. Eventually, a big satisfaction of giving birth to something useful.\\nI also learnt how to use databases and connect a backend to them and then to a frontend. Enough to try take-home projects for the interviews and fail almost all of them. But as they say, it takes one to make it worth it.\"), mdx(\"h2\", {\n    \"id\": \"one-month-before-the-job-starts\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#one-month-before-the-job-starts\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"One month before the job starts\"), mdx(\"p\", null, \"Once I got hired, I did what was not 'explicitally' requested but I think is a good approach (especially for your future self). I got in touch with my future colleagues so they could tell me what I should improve, or what tech stack should I add to my knowledge before the first day of work. Of course it's all theoretical because you don't really know anything about the project you'll work on. But having a good starting point saves you a lot of time in the first month.\"), mdx(\"p\", null, \"In my case was especially Typescript. I never used it before so I took the opportunity, documentation always opened, to take a brief Udemy course and transform everything to Typescript in my take-home assignment that I made for my initial interview.\\nI had a list of technologies used by the team to check upon; I had maybe knowledge of two thirds of them but good enough skills on one third. The rest I just remotely heard they were existing.\"), mdx(\"h2\", {\n    \"id\": \"the-first-three-months\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#the-first-three-months\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"The first three months\"), mdx(\"p\", null, \"How would I describe it? At least overwhelming. Where I live, since you start a new position, usually you enter a three months period called trial or probation period, in which, in theory, you and the company have to decided whether you're a good fit to each other. And each other have the right to leave you in the street with 2 weeks notice. I know that's a lot less stressful than other countries (AFAIK the US for example where the 2 weeks are a permanent notice time) but still, that makes this time particularly sensitive. Especially passing from a senior position (my previous) to a junior one where I had to prove myself.\"), mdx(\"p\", null, \"It came to the first days where, apart from the initial setup, I had to get familiar with the codebase I had to work on.\\nAnd then...apart from one small ticket for a small change, I was given the assignment to r-e-f-a-c-t-o-r the whole codebase. \\uD83E\\uDD2F\"), mdx(\"p\", null, \"That one came from some older vendor and was taken by my company which improved it a little and added the requested features. But it was over complicated, with lots of useless code. So yeah, they told me, just rewrite it from scratch using Typescript.\"), mdx(\"p\", null, \"I confess I had my moments of panick. Frustration, impatience, other negative feelings here and there. Especially with the first PRs (pull requests) which were reviewed with tons of comments on how to do things differently, or change code, or delete parts and remake others.\"), mdx(\"p\", null, \"Well guess what? It was the best exercise ever. It allowed me to know from top to bottom the code, and slowly slowly improving the quality of my programming, applying DRY and SOLID principles, algorithms, and so on. Sometimes I had to remake things 3 or 4 times before having a good version. Eventually, for that particular project, I had just few, more 'coding style' corrections. That doesn't mean I write code as good as my colleagues -yet - but it's an amazing progress for me.\"), mdx(\"p\", null, \"Of course, this wouldn't have been possible if I wouldn't have the most understanding colleagues, which are experienced and patient with all my questions and misunderstandings.\"), mdx(\"h2\", {\n    \"id\": \"some-of-the-lessons-learnt\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#some-of-the-lessons-learnt\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Some of the lessons learnt\"), mdx(\"ol\", null, mdx(\"li\", null, \"Have patience with yourself. If they hire you as a junior nobody is expecting miracles\"), mdx(\"li\", null, \"Don't lose temper with your colleagues even if they seem impatient with you. Sometime they're under pressure from the customer or the managers and they're just shielding you from some storm.\"), mdx(\"li\", null, \"Related but apart as important: your colleagues are your best allies\"), mdx(\"li\", null, \"Don't suppose that your code is perfect because it's working. First, a second pair of eyes will find bugs here and there. Second, there's always some ways to make the code cleaner and more readable. What you don't know, you don't know and can't see. So always suppose that the code will be correted.\"), mdx(\"li\", null, \"I am the type that passes hours trying to solve a bug because it's a question of self pride. If you don't have this, ask if you're stuck (but anyway try as much as possible by yourself, your colleagues are busy)\"), mdx(\"li\", null), mdx(\"li\", null)));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This post was supposed to be after three months into my work. But time passed, and so here it is with the experience of a couple more months.</p><h2 id=\"before-i-got-hired\"><a href=\"#before-i-got-hired\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Before I got hired</h2><p>My story about getting a developer job is coming from a long way in the past. I wrote about it <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://\">here.</a></p><p>What I specifically learnt in the one or two years of learning development were the basics, how to create something simple in a linear order, and some styling. I also learnt through examples and a lot of stack overflow &#x27;investigation&#x27; how to put things somehow together and make it work. A lot of copy paste not working and lots of sweat to make it work. Eventually, a big satisfaction of giving birth to something useful.\nI also learnt how to use databases and connect a backend to them and then to a frontend. Enough to try take-home projects for the interviews and fail almost all of them. But as they say, it takes one to make it worth it.</p><h2 id=\"one-month-before-the-job-starts\"><a href=\"#one-month-before-the-job-starts\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>One month before the job starts</h2><p>Once I got hired, I did what was not &#x27;explicitally&#x27; requested but I think is a good approach (especially for your future self). I got in touch with my future colleagues so they could tell me what I should improve, or what tech stack should I add to my knowledge before the first day of work. Of course it&#x27;s all theoretical because you don&#x27;t really know anything about the project you&#x27;ll work on. But having a good starting point saves you a lot of time in the first month.</p><p>In my case was especially Typescript. I never used it before so I took the opportunity, documentation always opened, to take a brief Udemy course and transform everything to Typescript in my take-home assignment that I made for my initial interview.\nI had a list of technologies used by the team to check upon; I had maybe knowledge of two thirds of them but good enough skills on one third. The rest I just remotely heard they were existing.</p><h2 id=\"the-first-three-months\"><a href=\"#the-first-three-months\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>The first three months</h2><p>How would I describe it? At least overwhelming. Where I live, since you start a new position, usually you enter a three months period called trial or probation period, in which, in theory, you and the company have to decided whether you&#x27;re a good fit to each other. And each other have the right to leave you in the street with 2 weeks notice. I know that&#x27;s a lot less stressful than other countries (AFAIK the US for example where the 2 weeks are a permanent notice time) but still, that makes this time particularly sensitive. Especially passing from a senior position (my previous) to a junior one where I had to prove myself.</p><p>It came to the first days where, apart from the initial setup, I had to get familiar with the codebase I had to work on.\nAnd then...apart from one small ticket for a small change, I was given the assignment to r-e-f-a-c-t-o-r the whole codebase. 🤯</p><p>That one came from some older vendor and was taken by my company which improved it a little and added the requested features. But it was over complicated, with lots of useless code. So yeah, they told me, just rewrite it from scratch using Typescript.</p><p>I confess I had my moments of panick. Frustration, impatience, other negative feelings here and there. Especially with the first PRs (pull requests) which were reviewed with tons of comments on how to do things differently, or change code, or delete parts and remake others.</p><p>Well guess what? It was the best exercise ever. It allowed me to know from top to bottom the code, and slowly slowly improving the quality of my programming, applying DRY and SOLID principles, algorithms, and so on. Sometimes I had to remake things 3 or 4 times before having a good version. Eventually, for that particular project, I had just few, more &#x27;coding style&#x27; corrections. That doesn&#x27;t mean I write code as good as my colleagues -yet - but it&#x27;s an amazing progress for me.</p><p>Of course, this wouldn&#x27;t have been possible if I wouldn&#x27;t have the most understanding colleagues, which are experienced and patient with all my questions and misunderstandings.</p><h2 id=\"some-of-the-lessons-learnt\"><a href=\"#some-of-the-lessons-learnt\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Some of the lessons learnt</h2><ol><li>Have patience with yourself. If they hire you as a junior nobody is expecting miracles</li><li>Don&#x27;t lose temper with your colleagues even if they seem impatient with you. Sometime they&#x27;re under pressure from the customer or the managers and they&#x27;re just shielding you from some storm.</li><li>Related but apart as important: your colleagues are your best allies</li><li>Don&#x27;t suppose that your code is perfect because it&#x27;s working. First, a second pair of eyes will find bugs here and there. Second, there&#x27;s always some ways to make the code cleaner and more readable. What you don&#x27;t know, you don&#x27;t know and can&#x27;t see. So always suppose that the code will be correted.</li><li>I am the type that passes hours trying to solve a bug because it&#x27;s a question of self pride. If you don&#x27;t have this, ask if you&#x27;re stuck (but anyway try as much as possible by yourself, your colleagues are busy)</li><li></li><li></li></ol>","scope":{}},"frontMatter":{"wordCount":886,"readingTime":{"text":"5 min read","minutes":4.42,"time":265200,"words":884},"slug":"what-learnt-in-first-four-months-self-taught-developer","fileName":"what-learnt-in-first-four-months-self-taught-developer.mdx","title":"What I learnt in my first four months as a self-taught developer","date":"2020-10-31","template":"post","draft":true,"tags":["react","web development"],"summary":"A guide of what I'm learning on the Epic React workshopds by Kent Dodds. This is the first one: fundamentals"}},"prev":{"title":"Useful GIT commands","date":"2021-01-26","tags":["git","web development"],"draft":false,"summary":"Useful commands to use in git in everyday working life","slug":"useful-git-commands"},"next":null},"__N_SSG":true}