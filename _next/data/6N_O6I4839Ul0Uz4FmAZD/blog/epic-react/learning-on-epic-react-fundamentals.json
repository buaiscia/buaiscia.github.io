{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var c=a=>i(a,\"__esModule\",{value:!0});var u=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),g=(a,t)=>{c(a);for(var s in t)i(a,s,{get:t[s],enumerable:!0})},k=(a,t,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of d(t))!m.call(a,n)&&n!==\"default\"&&i(a,n,{get:()=>t[n],enumerable:!(s=h(t,n))||s.enumerable});return a},N=a=>k(c(i(a!=null?l(p(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var r=u((I,o)=>{o.exports=_jsx_runtime});var b={};g(b,{default:()=>y,frontmatter:()=>f});var e=N(r()),f={title:\"Epic React. Fundamentals. What I'm learning.\",date:\"2020-10-30\",draft:!1,tags:[\"react\",\"web development\",\"epic react\"],summary:\"A guide of what I'm learning on the Epic React workshops by Kent Dodds. This is the first one: fundamentals\"};function w(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,Object.assign({},a,{children:(0,e.jsx)(s,{})})):s();function s(){let n=Object.assign({h3:\"h3\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h3,{id:\"table-of-content\",children:[(0,e.jsx)(n.a,{href:\"#table-of-content\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Table of Content\"]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#intro\",children:\"Intro\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#01-basic-javascript-rendered\",children:\"01: Basic JavaScript-rendered\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#02-intro-to-raw-react-apis\",children:\"02: Intro to raw React APIs\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#03-using-jsx\",children:\"03: Using JSX\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#04-creating-custom-components\",children:\"04: Creating custom components\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#05-styling\",children:\"05: Styling\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#06-forms\",children:\"06: Forms\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#07-rendering-arrays\",children:\"07: Rendering Arrays\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#conclusion\",children:\"Conclusion\"})})]}),(0,e.jsxs)(n.h2,{id:\"intro\",children:[(0,e.jsx)(n.a,{href:\"#intro\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Intro\"]}),(0,e.jsx)(n.p,{children:\"At this moment in my career, I'm a Javascript fullstack developer in the early stages. I've a good knowledge of Javascript, however React gives me sometimes a little more than a headache to understand deeply. I grew up in my learning with class based components, so later, when hooks were introduced, I found a little difficult to transition to this new way of writing React. That's why I wanted this course.\"}),(0,e.jsx)(n.p,{children:\"As part of my learning process, I'm going to note down not everything, but what I learnt, for each section. Often my solution was, although working, more complicated and less elegant than Kent's one. That's another aspect I wish to improve in my coding.\"}),(0,e.jsxs)(n.p,{children:[\"Of course you will find many more details and, well, the workshop itself directly in \",(0,e.jsx)(\"a\",{href:\"https://epicreact.dev\",children:\"epicreact.dev\"}),\" I hope this will be useful to somebody else apart from me, and forgive my mistakes in English (not a native speaker).\"]}),(0,e.jsxs)(n.h2,{id:\"01-basic-javascript-rendered\",children:[(0,e.jsx)(n.a,{href:\"#01-basic-javascript-rendered\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"01: Basic JavaScript-rendered\"]}),(0,e.jsx)(n.p,{children:\"In the first exercise, it's necessary to make some DOM manipulation with plain Javascript. As I'm using this method in my daily work, I had no difficulties in the first part. As a matter of fact, I'm learning a lot into transforming a codebase that is heavily relying on jQuery into plain Javascript.\"}),(0,e.jsx)(n.p,{children:\"However, I did have to do some thinking on the additional exercise, as I'm not used to work with the root element of the body. So I personally didn't know -but now that I know, it makes sense - that there's a body object inside the document object. I won't give here the solution, but it's an important reminder to always check the parent elements... what are they hiding inside :)\"}),(0,e.jsxs)(n.h2,{id:\"02-intro-to-raw-react-apis\",children:[(0,e.jsx)(n.a,{href:\"#02-intro-to-raw-react-apis\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"02: Intro to raw React APIs\"]}),(0,e.jsx)(n.p,{children:\"The second exercise of the workshop was already trickier - which I was happy about because definitely I didn't want to learn again the same stuff. It's not often, if ever, that we are using the React.createElement. Using JSX we just skip this part, but that's how it works under the hood. So after learning what jQuery is doing in Javascript, now it's React in Javascript.\"}),(0,e.jsx)(n.p,{children:\"First thing I learnt here is that the famous property 'children', in React, corresponds to textContent in plain JS. It makes sense, of course, as a matter of fact we are rendering some text made visually in HTML.\"}),(0,e.jsx)(n.p,{children:\"The second thing is that createElement has three - or more - arguments that can be passed.\"}),(0,e.jsxs)(\"ol\",{children:[(0,e.jsx)(\"li\",{children:\"The type of element (span, div, etc)\"}),\" \",(0,e.jsx)(\"li\",{children:\"The object passed inside the element (class, children, etc)\"}),\" \",(0,e.jsx)(\"li\",{children:\"A n number of other objects, that will be rendered as additional children.\"})]}),(0,e.jsx)(n.p,{children:\"As a matter of fact, the children property doesn't even have to be defined inside the second argument of createElement, but can be listed at the end of the method.\"}),(0,e.jsxs)(n.h2,{id:\"03-using-jsx\",children:[(0,e.jsx)(n.a,{href:\"#03-using-jsx\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"03: Using JSX\"]}),(0,e.jsx)(n.p,{children:\"The third exercise was about creating simple JSX elements that Babel will transform in normal JS with React.createElement. As it's basically almost a reverse engineering of the previous exercises, it was not difficult. However, it was interesting the use of the spread operator inside a div element, which createElement puts in the correct position:\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" className \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'myClass'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" children \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'this is my text'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" props \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" children\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" className \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"element \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"div \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token operator spread\",children:\"...\"}),\"props\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"It will create a div with its own class and the innertext as children.\"}),(0,e.jsx)(n.p,{children:\"Another interesting point in the video is about prioritization of position using the spread operator. Supposing that we have the above props, but then we want to override the className with another name, we have to place the spread props before. In synthesis, the right argument will always override the left ones.\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"div \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token operator spread\",children:\"...\"}),\"props\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" className\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'secondClass'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:'// <div className=\"secondClass\" />'}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"div \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"className\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'secondClass'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator spread\",children:\"...\"}),\"props\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:'// <div className=\"myClass\" />'}),`\n`]})]})}),(0,e.jsxs)(n.h2,{id:\"04-creating-custom-components\",children:[(0,e.jsx)(n.a,{href:\"#04-creating-custom-components\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"04: Creating custom components\"]}),(0,e.jsx)(n.p,{children:'So here we go finally to start creating components. The first part consists in creating a function that basically returns a div, so instead of repeating div div in the rendered element, we just pass the function with the string as \"children\". One thing that I knew but forgot explicitly is that if I pass a parameter to the function as an object, the argument must be an object as well. So:'}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function function-variable\",children:\"helloFunction\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsxs)(n.span,{className:\"token parameter\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" children \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator arrow\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"div\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"children\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),\"div\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"helloFunction\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" children\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'Hello'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"The next point was to implement this function as an element:\"}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.code,{children:\"const myElement = React.createElement(message, { children: 'Hello!' })\"})}),(0,e.jsx)(n.p,{children:\"and finally incorporate it in the element itself, which will be taken into ReactDom.render:\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" element \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token operator spread\",children:\"...\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"myElement\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"Following that, it's about referring the same helloFunction but make it directly compiled through Babel as an element, without needing to pass through createElement. This is possible thanks to JSX, and it's enough to make the function name with first letter as capital, and reference it inside the element object as that. \",(0,e.jsx)(n.code,{children:\"HelloFunction = () = {}\"})]}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.code,{children:\"<HelloFunction>Hello!</HelloFunction>\"})}),(0,e.jsxs)(n.p,{children:[\"This is the equivalent of \",(0,e.jsx)(n.code,{children:\"React.createElement(HelloFunction, null, 'Hello!')\"})]}),(0,e.jsx)(n.p,{children:\"Next, it was the time of implementing propTypes for typechecking, giving the same above function to have two parameters, both strings. In the workshop, it's explained how to make a propTypes function for checking manually the type. But it's interesting that it's not taking advantage of the prop-types library. It is true that for a simple check of two props, importing a whole library is excessive; but I don't think I'll ever just use two checks.\"}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.code,{children:'<script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"><\\/script>'})}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"HelloFunction\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"propTypes\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  greeting\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"PropTypes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  subject\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"PropTypes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"I'm not getting either a personalized message, but the standard warning is understandable enough\"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:\"Invalid prop `subject` of type `number` supplied to `Message`, expected `string`. in HelloFunction\\n\"})})}),(0,e.jsx)(n.p,{children:\"Ah, here we go, in the next exercise there's the implementation of the library... ooooops, I went a little over head. But good point, to implement also 'isRequired'\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"HelloFunction\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"propTypes\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  greeting\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"PropTypes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"isRequired\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  subject\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"PropTypes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"isRequired\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"Anyway, Typescript rules!\"}),(0,e.jsxs)(n.h2,{id:\"05-styling\",children:[(0,e.jsx)(n.a,{href:\"#05-styling\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"05: Styling\"]}),(0,e.jsx)(n.p,{children:\"In this exercise it was needed to apply style to a custom component in various ways. On a first part, just adding inline styling to a small div; then to a custom component passing its className prop; finally, passing only a string as a size prop and selecting dynamically the style inside the custom component.\"}),(0,e.jsx)(n.p,{children:\"First note: when making a reusable component, normally it's good to place all defaults on the left and what the user is providing (spread operator) after, because we don't want to enforce something.\"}),(0,e.jsx)(n.p,{children:\"Second note: as usual I overcomplicated things. As the size property passed would be only small, medium and large, and the classes are called box--small, box--medium, box--large, it's enough to substitute the size with the size prop passed into the component.\"}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.code,{children:\"box--${size}\"})}),(0,e.jsx)(n.p,{children:\"adding that to a ternary operator in case it's the prop is not present. What I did instead was a nested ternary operator with an object created with the classes names inside. Much more complicated, although it was working \\u{1F601}\"}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" sizes \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  small\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'box--small'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  medium\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'box--medium'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  large\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'box--large'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"className\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsxs)(n.span,{className:\"token template-string\",children:[(0,e.jsx)(n.span,{className:\"token string template-punctuation\",children:\"`\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"box \"}),(0,e.jsxs)(n.span,{className:\"token interpolation\",children:[(0,e.jsx)(n.span,{className:\"token punctuation interpolation-punctuation\",children:\"${\"}),\"size \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'small'\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"?\"}),\" sizes\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"small\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" size \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'medium'\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"?\"}),\" sizes\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"medium\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" sizes\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"large\"}),(0,e.jsx)(n.span,{className:\"token punctuation interpolation-punctuation\",children:\"}\"})]}),(0,e.jsx)(n.span,{className:\"token string template-punctuation\",children:\"`\"})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsxs)(n.h2,{id:\"06-forms\",children:[(0,e.jsx)(n.a,{href:\"#06-forms\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"06: Forms\"]}),(0,e.jsx)(n.p,{children:\"In the first exercise, the object is creating a submit listener/handler that will call the function in the main component, which is passed through as a prop.\"}),(0,e.jsxs)(n.p,{children:[\"We can put events (will be React synthetic events) on each element; however, the onSubmit goes inside the form to catch every field that is contained. Synthetic events are objects that React creates that look and behave like regular DOM events. It's still possible to access the DOM event with \",(0,e.jsx)(n.code,{children:\"event.nativeEvent\"}),\", however, the synthetic one is optimized to work with React code, and the virtual DOM.\"]}),(0,e.jsx)(n.p,{children:\"I created then a function inside the function (a callback), called once the submit button is clicked. And I've added the preventDefault() to that event to prevent the page to refresh (as default event for a form).\"}),(0,e.jsx)(n.p,{children:\"Another interesting thing is about accessibility. Screen readers need to associate the input with its label. So it's needed to give the input an id and the label a htmlFor (the same for= parameter in normal HTML). Moreover, this gives the property of focusing on the input when clicking on it.\"}),(0,e.jsx)(n.p,{children:\"The second part of the exercise was about doing the same as above but using the useRef hook. UseRef are simply reference pointers to an element. First, it's needed to be imported from 'react' and not 'react-dom'.\"}),(0,e.jsxs)(n.p,{children:[\"Then, adding the reference to our input \",(0,e.jsx)(n.code,{children:\"<input ref={usernameInput} />\"}),\" In the main function (or custom component), we can call the hook: \",(0,e.jsx)(n.code,{children:\"const usernameInput = useRef(null);\"}),\" Why null? The argument of useRef is the initial value. But in this case we don't need that, just what will be in usernameInput.\"]}),(0,e.jsxs)(n.p,{children:[\"Finally, we can access all our referenced properties, like the input value, this way: \",(0,e.jsx)(n.code,{children:\"usernameInput.current.value\"})]}),(0,e.jsxs)(n.p,{children:[\"In the next credit, it was needed to create a controlled input. A controlled input is an input field that is controlled by the component state. That means setting the value of the input by the state: \",(0,e.jsx)(n.code,{children:\"<input ref={usernameInput} value={username} onChange={handleChange} />\"})]}),(0,e.jsxs)(n.p,{children:[\"Then, we can set the state at the top of the component: \",(0,e.jsx)(n.code,{children:\"const [username, setUsername] = useState('');\"}),\" And finally, use that state to change the value of the input in the handleChange function. In this case, transforming every key to lowercase:\"]}),(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" value \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" event\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"target\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"setUsername\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"value\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access function method\",children:\"toLowerCase\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"So the flow is the following: input from user --> update input state --> transforming input state -> sending the state as value of the input --> input appears on screens.\"}),(0,e.jsxs)(n.h2,{id:\"07-rendering-arrays\",children:[(0,e.jsx)(n.a,{href:\"#07-rendering-arrays\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"07: Rendering Arrays\"]}),(0,e.jsx)(n.p,{children:\"The exercises were just little demonstrations in this case, to show the importance of using a unique index key when showing elements in the DOM through a mapping. Not without, not with the pre-built index of the map function, but with a preset set of keys to use. This allows also React to keep the state of the inputs even with continuous rendering.\"}),(0,e.jsx)(n.p,{children:\"Not doing so is a mistake that leads to any kind of unpredictable behavior. I did this time ago and it also cost me many points in an interview.\"}),(0,e.jsxs)(n.h2,{id:\"conclusion\",children:[(0,e.jsx)(n.a,{href:\"#conclusion\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),(0,e.jsx)(n.p,{children:\"This is all for the Epic React Fundamentals section. I already know that the next workshops will be more challenging, but it was useful to know/be reminded of some basics.\"}),(0,e.jsxs)(n.p,{children:[\"Thank you for reading and let's connect on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/AlexBuaiscia\",children:\"Twitter\"}),\"!\"]})]})}}var y=w;return b;})();\n;return Component;","toc":[{"value":"Table of Content","url":"#table-of-content","depth":3},{"value":"Intro","url":"#intro","depth":2},{"value":"01: Basic JavaScript-rendered","url":"#01-basic-javascript-rendered","depth":2},{"value":"02: Intro to raw React APIs","url":"#02-intro-to-raw-react-apis","depth":2},{"value":"03: Using JSX","url":"#03-using-jsx","depth":2},{"value":"04: Creating custom components","url":"#04-creating-custom-components","depth":2},{"value":"05: Styling","url":"#05-styling","depth":2},{"value":"06: Forms","url":"#06-forms","depth":2},{"value":"07: Rendering Arrays","url":"#07-rendering-arrays","depth":2},{"value":"Conclusion","url":"#conclusion","depth":2}],"frontMatter":{"readingTime":{"text":"10 min read","minutes":9.665,"time":579900,"words":1933},"slug":"epic-react/learning-on-epic-react-fundamentals","fileName":"epic-react/learning-on-epic-react-fundamentals.md","title":"Epic React. Fundamentals. What I'm learning.","date":"2020-10-30T00:00:00.000Z","draft":false,"tags":["react","web development","epic react"],"summary":"A guide of what I'm learning on the Epic React workshops by Kent Dodds. This is the first one: fundamentals"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.94,"time":56400,"words":188},"slug":["default"],"fileName":"default.md","name":"Alex Buaiscia","avatar":"/static/images/avatar.png","occupation":"Full-stack Software Developer","company":"Moravio","twitter":"https://twitter.com/AlexBuaiscia","linkedin":"https://www.linkedin.com/in/alex-buaiscia/","github":"https://github.com/buaiscia","date":null}],"prev":{"title":"Creating events and setting listeners in Javascript","date":"2020-09-02T00:00:00.000Z","draft":false,"tags":["Javascript","Web development","tips"],"summary":"How to add an event and how to create a listener to that event","slug":"tips/creating-events-and-setting-listeners"},"next":{"title":"Mock an Axios call with a JSON file.","date":"2020-11-13T00:00:00.000Z","draft":false,"tags":["nodejs","web development","api","tips"],"summary":"How to avoid test calling a third party API with Axios using a mock JSON file","slug":"tips/sending-mock-json-response-axios"}},"__N_SSG":true}